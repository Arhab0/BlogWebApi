// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BlogWebApi.Models;

public partial class BlogWebDBContext : DbContext
{
    public BlogWebDBContext(DbContextOptions<BlogWebDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<RecentlyViewedPost> RecentlyViewedPosts { get; set; }

    public virtual DbSet<ReplyComment> ReplyComments { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<WatchLater> WatchLaters { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.ToTable("category");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Category1)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("category");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.ToTable("comments");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Comment1)
                .HasColumnType("text")
                .HasColumnName("comment");
            entity.Property(e => e.CommentAt)
                .HasColumnType("datetime")
                .HasColumnName("commentAt");
            entity.Property(e => e.IsEdited).HasColumnName("isEdited");
            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Post).WithMany(p => p.Comments)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_comments_Posts");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_comments_users");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.Property(e => e.CatId).HasColumnName("cat_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Img)
                .HasColumnType("text")
                .HasColumnName("img");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.IsAdult).HasColumnName("isAdult");
            entity.Property(e => e.IsApproved).HasColumnName("isApproved");
            entity.Property(e => e.ReasonForReject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Reason_for_reject");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.PostApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_Posts_users");

            entity.HasOne(d => d.Cat).WithMany(p => p.Posts)
                .HasForeignKey(d => d.CatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Posts_category1");

            entity.HasOne(d => d.RejectedByNavigation).WithMany(p => p.PostRejectedByNavigations)
                .HasForeignKey(d => d.RejectedBy)
                .HasConstraintName("FK_Posts_users2");

            entity.HasOne(d => d.User).WithMany(p => p.PostUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Posts_users1");
        });

        modelBuilder.Entity<RecentlyViewedPost>(entity =>
        {
            entity.ToTable("recently_viewed_posts");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LastViewed)
                .HasColumnType("datetime")
                .HasColumnName("last_viewed");
            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Post).WithMany(p => p.RecentlyViewedPosts)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK_recently_viewed_posts_Posts");

            entity.HasOne(d => d.User).WithMany(p => p.RecentlyViewedPosts)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_recently_viewed_posts_users");
        });

        modelBuilder.Entity<ReplyComment>(entity =>
        {
            entity.ToTable("reply_comments");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CommentId).HasColumnName("comment_id");
            entity.Property(e => e.IsEdited).HasColumnName("isEdited");
            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.RepliedAt)
                .HasColumnType("datetime")
                .HasColumnName("repliedAt");
            entity.Property(e => e.RepliedBy).HasColumnName("replied_by");
            entity.Property(e => e.RepliedTo).HasColumnName("replied_to");
            entity.Property(e => e.Reply)
                .HasColumnType("text")
                .HasColumnName("reply");

            entity.HasOne(d => d.Comment).WithMany(p => p.ReplyComments)
                .HasForeignKey(d => d.CommentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reply_comments_comments");

            entity.HasOne(d => d.Post).WithMany(p => p.ReplyComments)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reply_comments_Posts");

            entity.HasOne(d => d.RepliedByNavigation).WithMany(p => p.ReplyCommentRepliedByNavigations)
                .HasForeignKey(d => d.RepliedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reply_comments_users1");

            entity.HasOne(d => d.RepliedToNavigation).WithMany(p => p.ReplyCommentRepliedToNavigations)
                .HasForeignKey(d => d.RepliedTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reply_comments_users");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("roles");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Role1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("role");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("users");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("first_name");
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gender");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.LastName)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("last_name");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phoneNo");
            entity.Property(e => e.ProfilePic)
                .HasColumnType("text")
                .HasColumnName("profile_pic");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("state");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_users_roles1");
        });

        modelBuilder.Entity<WatchLater>(entity =>
        {
            entity.ToTable("watch_later");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Post).WithMany(p => p.WatchLaters)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK_watch_later_Posts");

            entity.HasOne(d => d.User).WithMany(p => p.WatchLaters)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_watch_later_users");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}